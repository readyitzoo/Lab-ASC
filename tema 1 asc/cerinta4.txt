.data
    matr: .space 1600
    input: .space 1700
    nr_linii: .space 4
    nr_coloane: .space 4
    nr_elemente: .space 8
    before_atoi: .space 4
    operand: .space 4
    atoiRes: .space 4
    lineIndex:	.space 4
	columnIndex: .space 4
    formatPrintf: .asciz "%d " 
	formatNewline: .asciz "\n"
    caracter: .asciz " "
    
.text

.global main

main:
    #citire

    pushl $input
    call gets
	popl %ebx
  
    pushl $caracter
    pushl $input
    call strtok
    popl %ebx
    popl %ebx

    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx
    
    pushl %eax
    call atoi
    popl %ebx

    movl %eax, nr_linii

    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx
    
    pushl %eax
    call atoi
    popl %ebx
    
    movl %eax, nr_coloane
    mull nr_linii
    movl %eax, nr_elemente
    
    xorl %ecx, %ecx
    
for_citire_matrice:
    cmp nr_elemente, %ecx
    je citire_let
    
    pushl %ecx
    
    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx
    
    movl %eax, before_atoi
    pushl before_atoi
    call atoi
    popl %ebx
    
    popl %ecx
    movl $matr, %edi
    movl %eax, (%edi, %ecx, 4)
	
    incl %ecx
    jmp for_citire_matrice
citire_let:
    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx

    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx

citire_op:
    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx

    movl %eax, before_atoi

    pushl before_atoi
    call atoi
    popl %ebx

    cmp $0, %eax
    je et_rotire

    movl %eax, operand

et_operatie:
    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx

    pushl nr_linii
    pushl $formatPrintf
    call printf
    popl %ebx
    popl %ebx

    pushl nr_coloane
    pushl $formatPrintf
    call printf
    popl %ebx
    popl %ebx
    
    movl %eax, atoiRes
    
    movl atoiRes, %edi
    xorl %ecx, %ecx
    movb (%edi, %ecx, 1), %al

    cmp $'a', %al
    je op_add

    cmp $'s', %al
    je op_sub

    cmp $'m', %al
    je op_mul

    cmp $'d', %al
    je op_div



op_add:
    cmp nr_elemente, %ecx
    je et_exit

    movl $matr, %edi
    movl (%edi, %ecx, 4), %eax
    addl operand, %eax

    pushl %ecx
    pushl %eax
    pushl $formatPrintf
    call printf
    popl %ebx
    popl %ebx
    popl %ecx

    incl %ecx
    jmp op_add

op_sub:
    cmp nr_elemente, %ecx
    je et_exit

    movl $matr, %edi
    movl (%edi, %ecx, 4), %eax
    subl operand, %eax

    pushl %ecx
    pushl %eax
    pushl $formatPrintf
    call printf
    popl %ebx
    popl %ebx
    popl %ecx

    incl %ecx
    jmp op_sub
op_mul:
    cmp nr_elemente, %ecx
    je et_exit

    movl $matr, %edi
    movl (%edi, %ecx, 4), %eax
    mull operand
    
    pushl %ecx
    pushl %eax
    pushl $formatPrintf
    call printf
    popl %ebx
    popl %ebx
    popl %ecx

    incl %ecx
    jmp op_mul

op_div:
    cmp nr_elemente, %ecx
    je et_exit

    movl $matr, %edi
    movl (%edi, %ecx, 4), %eax
    xorl %edx, %edx
    cdq
    idivl operand

    pushl %ecx
    pushl %eax
    pushl $formatPrintf
    call printf
    popl %ebx
    popl %ebx
    popl %ecx

    incl %ecx
    jmp op_div

et_rotire:
    
et_exit:

    pushl $0
    call fflush
    popl %ebx

    movl $4, %eax
	movl $1, %ebx
	movl $formatNewline, %ecx
	movl $2, %edx
	int $0x80

    movl $1, %eax
    xorl %ebx, %ebx 
    int $0x80

