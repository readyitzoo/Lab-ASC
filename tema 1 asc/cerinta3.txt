.data
    v: .space 108
    input: .space 1000
    prima: .space 8
    op1: .space 8
    op2: .space 8
    atoiRes: .space 8
    ptlet: .space 8
    formatScanf: .asciz "%s"
    formatPrintf: .asciz "%d\n" 
	formatNewline: .asciz "\n"
    caracter: .asciz " "
.text

.global main

main:
    #citire
    pushl $input
    call gets
	popl %ebx
  
    pushl $caracter
    pushl $input
    call strtok
    popl %ebx
    popl %ebx

    movl %eax, atoiRes
    pushl atoiRes
    call atoi
    popl %ebx

    cmp $0, %eax
    jne et_numar
    jmp et_variabila

et_for:
    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx

    cmp $0, %eax
    je et_afisare

    movl %eax, atoiRes
    pushl atoiRes
    call atoi
    popl %ebx

    cmp $0, %eax
    jne et_numar

    movl atoiRes, %edi
    xorl %ecx, %ecx
    movb (%edi, %ecx, 1), %al

    cmp $'a', %al
    je op_add

    cmp $'s', %al
    je op_sub

    cmp $'m', %al
    je op_mul

    cmp $'d', %al
    je op_div

    cmp $'l', %al
    je op_let

    jmp et_variabila

et_numar:
    pushl %eax
    jmp et_for

op_add:

    incl %ecx
    movb (%edi, %ecx, 1), %al
    cmp $'d', %al
    jne et_variabila

    popl op1
    popl op2
    xorl %eax, %eax
    movl op2, %eax
    addl op1, %eax
    pushl %eax
    jmp et_for

op_sub:
    incl %ecx
    movb (%edi, %ecx, 1), %al
    cmp $'u', %al
    jne et_variabila

    popl op1
    popl op2
    xorl %eax, %eax
    movl op2, %eax
    subl op1, %eax
    pushl %eax
    jmp et_for

op_mul:
    incl %ecx
    movb (%edi, %ecx, 1), %al
    cmp $'u', %al
    jne et_variabila

    popl op1
    popl op2
    xorl %eax, %eax
    movl op2, %eax
    mull op1
    pushl %eax
    jmp et_for


op_div:
    incl %ecx
    movb (%edi, %ecx, 1), %al
    cmp $'i', %al
    jne et_variabila

    popl op1
    popl op2
    xorl %eax, %eax
    xorl %edx, %edx
    movl op2, %eax
    divl op1
    pushl %eax
    jmp et_for
op_let:
    movl %ecx, ptlet
    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx

    pushl %eax
    call atoi
    popl %ebx
    movl ptlet, %ecx
    movl %eax, (%edi, %ecx, 4)

    pushl $caracter
    pushl $0
    call strtok
    popl %ebx
    popl %ebx

    jmp et_for

et_variabila:
    movl atoiRes, %edi
    xorl %ecx, %ecx
    movb (%edi, %ecx, 1), %al

    movl %eax, %ecx
    subl $97, %ecx
    movl $v, %edi
    movl (%edi, %ecx, 4), %eax

    cmp $0, %eax
    je op_let
    pushl %eax
    
    jmp et_for

et_afisare:

    pushl $formatPrintf
    call printf
    popl %ebx
    popl %ebx

et_exit:

    movl $1, %eax
    xorl %ebx, %ebx 
    int $0x80